// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package handlers is a generated GoMock package.
package handlers

import (
	items "asperitas-clone/pkg/items"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "gopkg.in/mgo.v2/bson"
)

// MockPostRepositoryInterface is a mock of PostRepositoryInterface interface.
type MockPostRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryInterfaceMockRecorder
}

// MockPostRepositoryInterfaceMockRecorder is the mock recorder for MockPostRepositoryInterface.
type MockPostRepositoryInterfaceMockRecorder struct {
	mock *MockPostRepositoryInterface
}

// NewMockPostRepositoryInterface creates a new mock instance.
func NewMockPostRepositoryInterface(ctrl *gomock.Controller) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostRepositoryInterface) AddPost(arg0 *items.Post) (bson.ObjectId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", arg0)
	ret0, _ := ret[0].(bson.ObjectId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostRepositoryInterfaceMockRecorder) AddPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).AddPost), arg0)
}

// DeleteComment mocks base method.
func (m *MockPostRepositoryInterface) DeleteComment(arg0 *items.Post, arg1 bson.ObjectId, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepositoryInterfaceMockRecorder) DeleteComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeleteComment), arg0, arg1, arg2)
}

// DeletePost mocks base method.
func (m *MockPostRepositoryInterface) DeletePost(arg0 bson.ObjectId, arg1 *items.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryInterfaceMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeletePost), arg0, arg1)
}

// DeleteUserFromVoteTry mocks base method.
func (m *MockPostRepositoryInterface) DeleteUserFromVoteTry(arg0 *items.Post, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromVoteTry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromVoteTry indicates an expected call of DeleteUserFromVoteTry.
func (mr *MockPostRepositoryInterfaceMockRecorder) DeleteUserFromVoteTry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromVoteTry", reflect.TypeOf((*MockPostRepositoryInterface)(nil).DeleteUserFromVoteTry), arg0, arg1)
}

// GetAllPosts mocks base method.
func (m *MockPostRepositoryInterface) GetAllPosts() ([]*items.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]*items.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetAllPosts))
}

// GetPostByID mocks base method.
func (m *MockPostRepositoryInterface) GetPostByID(arg0 bson.ObjectId) (*items.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", arg0)
	ret0, _ := ret[0].(*items.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetPostByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetPostByID), arg0)
}

// GetPostsByCategory mocks base method.
func (m *MockPostRepositoryInterface) GetPostsByCategory(arg0 string) ([]*items.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", arg0)
	ret0, _ := ret[0].([]*items.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetPostsByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetPostsByCategory), arg0)
}

// GetPostsByUsername mocks base method.
func (m *MockPostRepositoryInterface) GetPostsByUsername(arg0 string) ([]*items.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUsername", arg0)
	ret0, _ := ret[0].([]*items.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUsername indicates an expected call of GetPostsByUsername.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetPostsByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUsername", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetPostsByUsername), arg0)
}

// PostComment mocks base method.
func (m *MockPostRepositoryInterface) PostComment(arg0 *items.Post, arg1 *items.Comment) (bson.ObjectId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", arg0, arg1)
	ret0, _ := ret[0].(bson.ObjectId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComment indicates an expected call of PostComment.
func (mr *MockPostRepositoryInterfaceMockRecorder) PostComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockPostRepositoryInterface)(nil).PostComment), arg0, arg1)
}

// Vote mocks base method.
func (m *MockPostRepositoryInterface) Vote(arg0 *items.Post, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockPostRepositoryInterfaceMockRecorder) Vote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockPostRepositoryInterface)(nil).Vote), arg0, arg1, arg2)
}
